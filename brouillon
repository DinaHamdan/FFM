// Définit la page d'accueil
//header('Location: ' . '/');

//How to save a password into the database
/* $pass = password_hash('test', PASSWORD_BCRYPT);
echo $pass;
*/

<main>
    <a href="/ctrl/agre/add-agre-display.php">Ajouter des photos d'agrés</a>

    <?php
    foreach ($args['session']['listPhotoAgre'] as $args['session']['photoAgre']) { ?>
        <img id="agre-photo" src="data:image/png;base64,<?= base64_encode($args['session']['photoAgre']['illustration']) ?>" alt="photo d'un agré">
    <?php } ?>



    <?php

    foreach ($args['session']['listPhotoCatAgre'] as $args['session']['photoCatAgre']) { ?>
        <h2><?= $args['session']['photoCatAgre']['category'] ?> </h2>
        <h2><?= $args['session']['photoCatAgre']['type'] ?> </h2>
    <?php } ?>
</main>

<?php

foreach ($args['session']['listPhotoFire'] as $args['session']['photoFire']) { ?>

    <h2><?= $args['session']['photoFire']['name'] ?> </h2>
<?php } ?>


<?php

foreach ($args['session']['listPhotoLED'] as $args['session']['photoLED']) { ?>

    <h2><?= $args['session']['photoLED']['name'] ?> </h2>
<?php } ?>

<?php

foreach ($args['session']['listCategory'] as $args['session']['category']) { ?>

    <h2><?= $args['session']['category']['name'] ?> </h2>
<?php } ?>


//
<h2>Agrès Feu</h2>
<?php

foreach ($args['session']['listPhotoFire'] as $args['session']['photoFire']) { ?>
    <div>
        <h2><?= $args['session']['photoFire']['agreName'] ?> </h2>
        <a href=" "><img id="agre-photo" src="data:image/png;base64,<?= base64_encode($args['session']['photoFire']['illustration']) ?>" alt="photo d'un agré"></a>
    </div>
<?php } ?>

<h2> Agrès LED</h2>

<?php
foreach ($args['session']['listPhotoLED'] as $args['session']['photoLED']) { ?>

    <h2><?= $args['session']['photoLED']['agreName'] ?> </h2>
    <img id="agre-photo" src="data:image/png;base64,<?= base64_encode($args['session']['listPhotoLED'][0]['illustration']) ?>" alt="photo d'un agré">

<?php } ?>
<?php 
//List type of juggling props
    static function getTypeAgre($isMain): array
    {
        $query = 'SELECT typeAgre.id, typeAgre.name, typeAgre.label, photoAgre.illustration';
        $query .= ' FROM typeAgre';
        $query .= ' JOIN photoAgre ON typeAgre.id = photoAgre.idTypeAgre ';
        $query .= ' WHERE photoAgre.isMain = :isMain';
        $statement = libDb::connect()->prepare($query);
        $statement->bindParam(':isMain', $isMain);

        // - Exécute la requête
        $successOrFailure = $statement->execute();
        $typeAgre = $statement->fetchAll(PDO::FETCH_ASSOC);
        return $typeAgre;
    }


//List type of juggling props
static function getTypeAgre(): array
{
$query = 'SELECT typeAgre.id, typeAgre.name, typeAgre.label, typeAgre.description, photoAgre.id, photoAgre.illustration, photoAgre.illustration_filename';
$query .= ' FROM typeAgre';
$query .= ' JOIN photoAgre ON typeAgre.id = photoAgre.idTypeAgre ';

$statement = libDb::connect()->prepare($query);
// - Exécute la requête
$successOrFailure = $statement->execute();
$typeAgre = $statement->fetchAll(PDO::FETCH_ASSOC);
return $typeAgre;
/* // Add a column with formatted data
$listAgrephoto = [];
foreach ($typeAgre as $agre) {
$agre['photo'] = $agre['illustration'][0];
$agre['photo_filename'] = $agre['illustration_filename'][0];
$listAgrephoto[] = $agre;
}
return $listAgrephoto; */
}


foreach ($_POST['listIdAgre'] as $idAgre[]) {
foreach ($_POST['listIdCategoryFire'] as $idCategoryFire[]);
foreach ($_POST['listIdCategoryLED'] as $idCategoryLED[]);
foreach ($_POST['listIdCategoryDayProp'] as $idCategoryDayProp[]);

$isSuccess = LibAgre::addAgreCategoryFeu($idAgre, $idCategoryFire);
$isSuccess = LibAgre::addAgreCategoryLED($idAgre, $idCategoryLED);
$isSuccess = LibAgre::addAgreCategoryDayProp($idAgre, $idCategoryDayProp);
};

/* static function addAgreCategoryFeu($idAgre, $idCategoryFire): bool
{
$query = 'INSERT INTO typeAgreCategory( idAgre, idCategory) VALUES ( :idAgre, :idCategory)';
$statement = libDb::connect()->prepare($query);

$statement->bindParam(':idAgre', $idAgre);
$statement->bindParam(':idCategory', $idCategoryFire);
// - Exécute la requête
$isSuccess = $statement->execute();
return $isSuccess;
}
static function addAgreCategoryLED($idAgre, $idCategoryLED): bool
{
$query = 'INSERT INTO typeAgreCategory( idAgre, idCategory) VALUES ( :idAgre, :idCategory)';
$statement = libDb::connect()->prepare($query);

$statement->bindParam(':idAgre', $idAgre);
$statement->bindParam(':idCategory', $idCategoryLED);
// - Exécute la requête
$isSuccess = $statement->execute();
return $isSuccess;
}
static function addAgreCategoryDayProp($idAgre, $idCategoryDayProp): bool
{
$query = 'INSERT INTO typeAgreCategory( idAgre, idCategory) VALUES ( :idAgre, :idCategory)';
$statement = libDb::connect()->prepare($query);

$statement->bindParam(':idAgre', $idAgre);
$statement->bindParam(':idCategory', $idCategoryDayProp);
// - Exécute la requête
$isSuccess = $statement->execute();
return $isSuccess;
} */
}
/* //Get all photos from the fire gallerie
static function getAgrePhotoFeu(): array
{
$query = 'SELECT photoAgreGallerieFeu.id, photoAgreGallerieFeu.nameAgre, photoAgreGallerieFeu.idTypeAgre, photoAgreGallerieFeu.idCategory, photoAgreGallerieFeu.illustration, photoAgreGallerieFeu.illustration_filename ';
$query .= ' FROM photoAgreGallerieFeu ';
$statement = libDb::connect()->prepare($query);
$successOrFailure = $statement->execute();
$listPhotoAgreFeu = $statement->fetchAll(PDO::FETCH_ASSOC);

return $listPhotoAgreFeu;
}
//Get all photos from the fire gallerie
static function getAgrePhotoLED(): array
{
$query = 'SELECT photoAgreGallerieLED.id, photoAgreGallerieLED.nameAgre, photoAgreGallerieLED.idTypeAgre, photoAgreGallerieLED.idCategory, photoAgreGallerieLED.illustration, photoAgreGallerieLED.illustration_filename ';
$query .= ' FROM photoAgreGallerieLED ';
$statement = libDb::connect()->prepare($query);
$successOrFailure = $statement->execute();
$listPhotoAgreLED = $statement->fetchAll(PDO::FETCH_ASSOC);

return $listPhotoAgreLED;
} */
/* //Add photos to agre table
static function AddAgrePhotoFeu($idCategory, $idTypeAgre, $binaryFile, $nameFile): bool
{
$query = 'INSERT INTO photoAgreGallerieFeu( idCategory, idTypeAgre, illustration, illustration_filename) VALUES ( :idCategory, :idTypeAgre, :illustration, :illustration_filename)';
$statement = libDb::connect()->prepare($query);

$statement->bindParam(':idTypeAgre', $idTypeAgre);
$statement->bindParam(':idCategory', $idCategory);
$statement->bindParam(':illustration', $binaryFile, PDO::PARAM_LOB);
$statement->bindParam(':illustration_filename', $nameFile, PDO::PARAM_STR);
// - Exécute la requête
$isSuccess = $statement->execute();
return $isSuccess;
}

//Add photos to agre table
static function AddAgrePhotoLED($idCategory, $idTypeAgre, $binaryFile, $nameFile): bool
{
$query = 'INSERT INTO photoAgreGallerieLED( idCategory, idTypeAgre, illustration, illustration_filename) VALUES ( :idCategory, :idTypeAgre, :illustration, :illustration_filename)';
$statement = libDb::connect()->prepare($query);

$statement->bindParam(':idTypeAgre', $idTypeAgre);
$statement->bindParam(':idCategory', $idCategory);
$statement->bindParam(':illustration', $binaryFile, PDO::PARAM_LOB);
$statement->bindParam(':illustration_filename', $nameFile, PDO::PARAM_STR);
// - Exécute la requête
$isSuccess = $statement->execute();
return $isSuccess;
} */
//Get all photos joining category and type


/* //Get all photos
static function getAllAgrePhoto(): array
{
$query = 'SELECT photoAgre.id, photoAgre.idTypeAgre, photoAgre.idCategory, photoAgre.illustration';
$query .= ' FROM photoAgre ';
$statement = libDb::connect()->prepare($query);
$successOrFailure = $statement->execute();
$listPhotoAgre = $statement->fetchAll(PDO::FETCH_ASSOC);

return $listPhotoAgre;
}
//Get all photos joining category and type
static function getAgrePhotoCategoryType(): array
{
$query = 'SELECT photoAgre.id, photoAgre.idTypeAgre, photoAgre.idCategory, photoAgre.illustration, category.id, category.name AS category, typeAgre.id, typeAgre.name AS type';
$query .= ' FROM photoAgre ';
$query .= ' JOIN category ON photoAgre.idCategory = category.id ';
$query .= ' JOIN typeAgre ON photoAgre.idTypeAgre = typeAgre.id ';
$statement = libDb::connect()->prepare($query);
$successOrFailure = $statement->execute();
$listPhotoCatAgre = $statement->fetchAll(PDO::FETCH_ASSOC);

return $listPhotoCatAgre;
}

//Get photo by category
static function getAgrePhotoCategory($idCategory): array
{
$query = 'SELECT photoAgre.id, photoAgre.idTypeAgre, photoAgre.idCategory, photoAgre.illustration,photoAgre.illustration_filename, category.id, category.name AS catName, typeAgre.id, typeAgre.name As agreName';
$query .= ' FROM photoAgre ';
$query .= ' JOIN category ON photoAgre.idCategory = category.id ';
$query .= ' JOIN typeAgre ON photoAgre.idTypeAgre = typeAgre.id ';
$query .= ' WHERE photoAgre.idCategory = :idCategory AND photoAgre.idTypeAgre = :idTypeAgre';

$statement = libDb::connect()->prepare($query);
$statement->bindParam(':idCategory', $idCategory);
$statement->bindParam(':idTypeAgre', $idTypeAgre);

$successOrFailure = $statement->execute();
$listPhotoCat = $statement->fetchAll(PDO::FETCH_ASSOC);

return $listPhotoCat;
}

//Get photo by type of agre
static function getAgrePhotoType($type): array
{
$query = 'SELECT photoAgre.id, photoAgre.idTypeAgre, photoAgre.idCategory, photoAgre.illustration, category.id, category.name AS category, typeAgre.id, typeAgre.name AS type';
$query .= ' FROM photoAgre ';
$query .= ' JOIN category ON photoAgre.idCategory = category.id ';
$query .= ' JOIN typeAgre ON photoAgre.idTypeAgre = typeAgre.id ';
$query .= ' WHERE type = :$type';

$statement = libDb::connect()->prepare($query);
$successOrFailure = $statement->execute();
$listPhotoType = $statement->fetchAll(PDO::FETCH_ASSOC);

return $listPhotoType;
} */

SELECT typeAgre.id, typeAgre.name AS agreName, typeAgre.label, category.id, category.name AS categoryName, typeAgreCategory.idAgre, typeAgreCategory.idCategory, photoAgre.illustration  FROM typeAgre JOIN typeAgreCategory ON typeAgre.id = typeAgreCategory.idAgre  JOIN category ON category.id = typeAgreCategory.idCategory  AND category.id = 1  JOIN photoAgre ON photoAgre.idTypeAgre = typeAgre.id  WHERE photoAgre.idCategory = 1



let pair = [];
const fetchEvenAndAdd1 = (intArray) => {
  for (let i = 0 ; i < 9; i ++){ 
  if (intArray[i] % 2 == 0)
    pair.push(intArray[i]);
    console.error('this is pair' + pair);
    let even = pair.map(function(impair){
      console.error('this is impair' + impair + 1);
    });
}



}


/** 
* @param {number[]} intArray
* @return {number[]}
*/// Declaring empty Even array
let intArray = [2,3,4,7,8];
let even = [];

intArray.forEach(i => {
    if( i % 2 == 0 )  
      even.push(i); });
       console.error(even);
  
 

       /** 
* @param {number[]} tab
* @return {number[]}
*/
 let tab = [5,7,9,1]
 const sortAlgo = (tab) => {
   for (i = 0; i < tab.length ; i++) {
    // console.error(tab[i]);
     for (j = tab.length - 1; j-1 > i; j--) {
      // console.error(tab[j]);
       if (tab[j] > tab[i]) {
         tmp = tab[j];
        console.error(tmp)
       }
       if(tab[j] < tab[i]) {
         tmp = tab[i];
         console.error(tmp)
       }
     }
   }
 
   return tab;
 }


 <?php

// Read the path of the requested URL 
$url = parse_url($_SERVER['REQUEST_URI'])['path'];

// Reference all routes of the application
$routes = [];

// homepage
$routes['/'] = '/ctrl/welcome.php';

//logout
$routes['/logout'] = '/ctrl/logout.php';

// adhesion
$routes['/adhesion/adhesion-display'] = '/ctrl/adhesion/adhesion-display.php';
$routes['/adhesion/adhesion'] = '/ctrl/adhesion/adhesion.php';

// props
$routes['/agre/add-agre-display'] = '/ctrl/agre/add-agre-display.php';
$routes['/agre/add-agre'] = '/ctrl/agre/add-agre.php';
$routes['/agre/add-agreType-display'] = '/ctrl/agre/add-agreType-display.php';
$routes['/agre/add-agreType'] = '/ctrl/agre/add-agreType.php';
$routes['/agre/list-agre'] = '/ctrl/agre/list-agre.php';
$routes['/agre/mainAgrePhoto'] = '/ctrl/agre/mainAgrePhoto.php';
$routes['/agre/remove-agrePhoto'] = '/ctrl/agre/remove-agrePhoto.php';
$routes['/agre/agrePhotoFire-display'] = '/ctrl/agre/agrePhotoFire-display';
$routes['/agre/agrePhotoLED-display'] = '/ctrl/agre/agrePhotoLED-display';

// backoffice
$routes['/backoffice/backoffice'] = '/ctrl/backoffice/backoffice.php';
$routes['/backoffice/adhesion'] = '/ctrl/backoffice/adhesion.php';
$routes['/backoffice/adhesion-detail'] = '/ctrl/backoffice/adhesion-detail.php';
$routes['/backoffice/contactMessage'] = '/ctrl/backoffice/contactMessage.php';
$routes['/backoffice/contactMessage-detail'] = '/ctrl/backoffice/contactMessage-detail.php';
$routes['/backoffice/list-member'] = '/ctrl/backoffice/list-members.php';
$routes['/backoffice/delete-member'] = '/ctrl/backoffice/delete-member.php';
$routes['/backoffice/list-photo-agre'] = '/ctrl/backoffice/list-photo-agre.php';
$routes['/backoffice/volunteer-form'] = '/ctrl/backoffice/volunteer-form.php';
$routes['/backoffice/volunteer-form-detail'] = '/ctrl/backoffice/volunteer-form-detail.php';


// contact 

$routes['/contact/contact-display'] = '/ctrl/contact/contact-display.php';
$routes['/contact/contact'] = '/ctrl/contact/contact.php';

//Event
$routes['/evenement/event'] = '/ctrl/evenement/event.php';
$routes['/evenement/update-event-display'] = '/ctrl/evenement/update-event-display.php';
$routes['/evenement/update-event'] = '/ctrl/evenement/update-event.php';
$routes['/evenement/volunteer-form-display'] = '/ctrl/evenement/volunteer-form-display.php';
$routes['/evenement/volunteer'] = '/ctrl/evenement/volunteer.php';

//forum 
$routes['/forum/forum-display'] = '/ctrl/forum/forum-display.php';
$routes['/forum/discussion-detail'] = '/ctrl/forum/discussion-detail.php';
$routes['/forum/create-discussion'] = '/ctrl/forum/create-discussion.php';
$routes['/forum/create-comment'] = '/ctrl/forum/create-comment.php';
$routes['/forum/delete-discussion'] = '/ctrl/forum/delete-discussion.php';
$routes['/forum/delete-comment'] = '/ctrl/forum/delete-comment.php';


//login
$routes['/login/login-display'] = '/ctrl/login/login-display.php';
$routes['/login/login'] = '/ctrl/login/login.php';

//profile
$routes['/profile/create-profile'] = '/ctrl/profile/create-profile.php';
$routes['/profile/profile-display'] = '/ctrl/profile/profile-display.php';
$routes['/profile/update-pass-display'] = '/ctrl/profile/update-pass-display.php';
$routes['/profile/update-pass'] = '/ctrl/profile/update-pass.php';

//registration
$routes['/registration/registration-display'] = '/ctrl/registration/registration-display.php';
$routes['/registration/registration'] = '/ctrl/registration/registration.php';

// search for requested route
$route = $routes[$url];

// Eventually redirect the user towards a personnalized error 404 page
// when the requested route is not referenced  
// WARN ça manque de log... ?
if (!isset($route)) {

    $target = $_SERVER['DOCUMENT_ROOT'] . '/view/_error/404.php';
    include($target);
    exit();
}

// Interpret/execute the code of the targeted controler  
$target = $_SERVER['DOCUMENT_ROOT'] . $route;
include($target);

// Add photo
<?php



require_once $_SERVER['DOCUMENT_ROOT'] . '/model/database.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/model/lib/agre.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/model/imgType.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/ctrl/ctrl.php';


class AddAgrePhoto extends Ctrl
{
    function do(): void
    {
        $isLogged = $this->isUserLogged();
        $isGranted = $this->hasRole(Role::ADMIN);

        //Initier une session  d'un objet msg avec info et erreur comme objet
        $_SESSION['msg']['info'] = [];
        $_SESSION['msg']['error'] = [];

        //Read information entered by admin
        $idTypeagre = htmlspecialchars($_POST['agreType']);
        $idCategory = htmlspecialchars($_POST['category']);


        $fileNames = $_FILES['agrePhoto']['name'];
        $fileSizes = $_FILES['agrePhoto']['size'];
        $fileTmps = $_FILES['agrePhoto']['tmp_name'];
        $fileTypes = $_FILES['agrePhoto']['type'];

        foreach ($fileNames as $key => $name) {
            $fileName = $fileNames[$key];
            $fileSize = $fileSizes[$key];
            $fileTmpName = $fileTmps[$key];
            $fileType = $fileTypes[$key];


            $png = Type::MY_IMG_PNG;
            $jpg = Type::MY_IMG_JPG;
            $listAcceptedFileTypes = [$png, $jpg];
            $acceptedFilesize = Type::FILE_MAX_SIZE;
            // Put in place several tests on the the uploaded photo to check if it has the right file type
            $isSupportedFileType = in_array($fileType, $listAcceptedFileTypes);

            if (!$isSupportedFileType) {
                // Add a flash message
                $_SESSION['msg']['error'][] = 'Les seuls formats de fichier acceptés sont : ' . implode(',', $listAcceptedFileTypes);
            }
            if (true) {
                if ($fileSize > $acceptedFilesize) {
                    $_SESSION['msg']['error'][] = 'La taille de la photo est trop grand';
                    header('Location: ' . '/agre/add-agre-display');
                    exit();
                }
            }
            $hasErrors = !empty($_SESSION['msg']['error']);
            if ($hasErrors) {
                // Redirect towards the form to correct the photo upload
                header('Location: ' . '/agre/add-agre-display');
                exit();
            }

            // Resize the photo
            // WARN! sudo apt install php-gd
            // $imgOriginal;

            if ($fileType == $png) {
                $imgOriginal = imagecreatefrompng($fileTmpName);
            }
            if ($fileType == $jpg) {
                $imgOriginal = imagecreatefromjpeg($fileTmpName);
            }
            //TODO Need to add algorithm to check for photo width and height and change it accordingly
            //do not add width and height because it will affect dimension and quality
            //serveur petit et grand , petit pour la vignette
            $img = imagescale($imgOriginal, 800, -1, IMG_BICUBIC);

           // $imgSharpened = imagesetinterpolation($img, IMG_SINC);

            imagepng($img, $fileTmpName);

            // Ajoute un flash-message
            $_SESSION['msg']['info'][] = 'La photo a été ajouté';

            //open binary image file and rb to make sure it's read by all operating systems
            $binaryFile = fopen($fileTmpName, 'rb');
            $nameFile = basename($fileName);

            $dateTime = date('Y-m-d h:i:s');
            // ("Y-m-d h:i:s")

            //Add photo
            $isSuccess = LibAgre::AddAgrePhoto($idCategory, $idTypeagre, $binaryFile, $nameFile, $dateTime);
            //Create a directory to save uploaded photos

            $uploadDirectory = $_SERVER['DOCUMENT_ROOT'] . '/upload/';
            // Copy the image file into the photo directory
            $uploadPath = $uploadDirectory . basename($fileName);
            $didUpload = move_uploaded_file($fileTmpName, $uploadPath);
        }
    }

    function renderView(): void
    {
        $args = $this->viewArgs;
        //add redirection

        header('Location: ' . '/agre/list-agre');
    }


    function getPageTitle(): null
    {
        return null;
    }
}

$ctrl = new AddAgrePhoto();
$ctrl->execute();
